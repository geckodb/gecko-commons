// Several pre-defined functions related to hash operations
// Copyright (C) 2017 Marcus Pinnecke
//
// This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either user_port 3 of the License, or
// (at your option) any later user_port.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with this program.
// If not, see <http://www.gnu.org/licenses/>.

#pragma once

// ---------------------------------------------------------------------------------------------------------------------
// I N C L U D E S
// ---------------------------------------------------------------------------------------------------------------------

#include <gecko-commons/stdinc.h>

// ---------------------------------------------------------------------------------------------------------------------
// D A T A   T Y P E S
// ---------------------------------------------------------------------------------------------------------------------

typedef size_t (*gs_hash_code_fn_t)(const void *capture, size_t key_size, const void *key);

typedef struct gs_hash_code_jen_args_t {
    unsigned initval;
} gs_hash_code_jen_args_t;

// ---------------------------------------------------------------------------------------------------------------------
// I N T E R F A C E  D E C L A R A T I O N S
// ---------------------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------------------
// I D E N T I T Y   H A S H
// ---------------------------------------------------------------------------------------------------------------------

size_t gs_hash_code_identity_size_t(const void *_, size_t key_size, const void *key);

// ---------------------------------------------------------------------------------------------------------------------
// P E R F E C T   H A S H
// ---------------------------------------------------------------------------------------------------------------------

size_t gs_hash_code_perfect_size_t(const void *capture, size_t key_size, const void *key);

// ---------------------------------------------------------------------------------------------------------------------
// A D D I T I V E   H A S H
// ---------------------------------------------------------------------------------------------------------------------

size_t gs_hash_code_additive(const void *_, size_t key_size, const void *key);

// ---------------------------------------------------------------------------------------------------------------------
// X O R   H A S H
// ---------------------------------------------------------------------------------------------------------------------

size_t gs_hash_code_xor(const void *_, size_t key_size, const void *key);

// ---------------------------------------------------------------------------------------------------------------------
// R O T A T I O N   H A S H
// ---------------------------------------------------------------------------------------------------------------------

size_t gs_hash_code_rot(const void *_, size_t key_size, const void *key);

// ---------------------------------------------------------------------------------------------------------------------
// B E R N S T E I N   H A S H
// ---------------------------------------------------------------------------------------------------------------------

size_t gs_hash_code_bernstein(const void *_, size_t key_size, const void *key);

// ---------------------------------------------------------------------------------------------------------------------
// M O D I F I E D   B E R N S T E I N   H A S H
// ---------------------------------------------------------------------------------------------------------------------

size_t gs_hash_code_bernstein2(const void *_, size_t key_size, const void *key);

// ---------------------------------------------------------------------------------------------------------------------
// S H I F T - A D D - X O R   H A S H
// ---------------------------------------------------------------------------------------------------------------------

size_t gs_hash_code_sax(const void *_, size_t key_size, const void *key);

// ---------------------------------------------------------------------------------------------------------------------
// F N V   H A S H
// ---------------------------------------------------------------------------------------------------------------------

size_t gs_hash_code_fnv(const void *_, size_t key_size, const void *key);

// ---------------------------------------------------------------------------------------------------------------------
// O N E - A T - A - T I M E   H A S H
// ---------------------------------------------------------------------------------------------------------------------

size_t gs_hash_code_oat(const void *_, size_t key_size, const void *key);

// ---------------------------------------------------------------------------------------------------------------------
// J S W   H A S H
// ---------------------------------------------------------------------------------------------------------------------

size_t gs_hash_code_jsw(const void *_, size_t key_size, const void *key);

// ---------------------------------------------------------------------------------------------------------------------
// E L F   H A S H
// ---------------------------------------------------------------------------------------------------------------------

size_t gs_hash_code_elf(const void *_, size_t key_size, const void *key);

// ---------------------------------------------------------------------------------------------------------------------
// J E N K I N S   H A S H
// ---------------------------------------------------------------------------------------------------------------------


/* must be of type 'gs_hash_code_jen_args_t' or NULL. In case this parameter is NULL, a default value for jen is taken */
size_t gs_hash_code_jen(const void *capture, size_t key_size, const void *key);